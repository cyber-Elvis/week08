## .github/workflows/cd_linked.yml
name: CD - Deploy Backend then Frontend to AKS

on:
  push:
    branches: [ main ]
    paths:
          - 'k8s/**'
          - 'backend/**'
          - 'frontend/**'
          - '.github/workflows/CD_linked.yml'

permissions:
  id-token: write
  contents: read

env:
  RG: SIT722-RG
  AKS: sit722-aks
  NS: sit722
  PRODUCT_PORT: "8000"
  ORDER_PORT:   "8001"

jobs:
  backend_cd:
    name: Deploy Backend (product + order)
    runs-on: ubuntu-latest
    outputs:
      product_ip: ${{ steps.capture.outputs.product_ip }}
      order_ip:   ${{ steps.capture.outputs.order_ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}          # = SIT722-RG
          cluster-name:  ${{ env.AKS }}          # = sit722-aks

      - name: Deploy product + order services
        run: |
          kubectl apply -n $NS -f k8s/product-service.yaml
          kubectl apply -n $NS -f k8s/order-service.yaml

      - name: Wait for External IPs & capture
        id: capture
        shell: bash
        run: |
          for i in {1..60}; do
            PIP=$(kubectl get svc product-service-w08e1 -n $NS -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            OIP=$(kubectl get svc order-service-w08e1   -n $NS -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PIP" && -n "$OIP" ]]; then
              echo "Product IP: $PIP"
              echo "Order IP:   $OIP"
              break
            fi
            sleep 5
          done
          [[ -n "$PIP" && -n "$OIP" ]] || { echo "IPs not assigned"; exit 1; }
          echo "product_ip=$PIP" >> $GITHUB_OUTPUT
          echo "order_ip=$OIP"   >> $GITHUB_OUTPUT

  frontend_cd:
    name: Deploy Frontend (uses backend IPs)
    runs-on: ubuntu-latest
    needs: backend_cd
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}   # einweek9acr

      - name: Inject Backend IPs into frontend/main.js
        shell: bash
        env:
          PRODUCT_IP:  ${{ needs.backend_cd.outputs.product_ip }}
          ORDER_IP:    ${{ needs.backend_cd.outputs.order_ip }}
          PRODUCT_PORT: ${{ env.PRODUCT_PORT }}
          ORDER_PORT:   ${{ env.ORDER_PORT }}
        run: |
          FILE="frontend/main.js"
          test -f "$FILE" || { echo "Missing $FILE"; exit 1; }
          grep -q "_PRODUCT_API_URL_" "$FILE" || { echo "PRODUCT placeholder missing"; exit 1; }
          grep -q "_ORDER_API_URL_"   "$FILE" || { echo "ORDER placeholder missing"; exit 1; }
          cp "$FILE" "${FILE}.before"

          sed -i "s|_PRODUCT_API_URL_|http://${PRODUCT_IP}:${PRODUCT_PORT}|g" "$FILE"
          sed -i "s|_ORDER_API_URL_|http://${ORDER_IP}:${ORDER_PORT}|g"       "$FILE"

          echo "Diff (context=0, only changed lines):"
          diff -u --strip-trailing-cr --label before "${FILE}.before" --label after "$FILE" | sed -n '1,120p' || true

      - name: Build & push frontend
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest ./frontend
          docker push    ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}          # = SIT722-RG
          cluster-name:  ${{ env.AKS }}          # = sit722-aks

      - name: Deploy frontend & show service
        run: |
          kubectl apply -n $NS -f k8s/frontend.yaml
          kubectl get svc -n $NS -o wide
